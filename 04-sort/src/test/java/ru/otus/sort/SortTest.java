/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.otus.sort;


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Comparator;

import static org.junit.jupiter.api.Assertions.*;


class SortTest {
    private static final String STANDARD_RATING = "standard_rating_list.xml";
    private Integer[] ints;
    private final Comparator<Integer> comparator = Integer::compare;

    private static final int size = 10000;
    @BeforeEach
    void prepare() {
        ints = Generator.generateRandom(size, size/2);
    }

    @Test
    void insertionSort() {
        Sort.insertion(ints, comparator);
        assertTrue(Sort.isSorted(ints, comparator));
    }

    @Test
    void shellSortCiura() {
        Sort.shell(ints, comparator, Sort.generateGapSequence(Sort.GapSequence.CIURA, size));
        assertTrue(Sort.isSorted(ints, comparator));
    }

    @Test
    void shellSortSedgewick() {
        Sort.shell(ints, comparator, Sort.generateGapSequence(Sort.GapSequence.SEDGEWICK, size));
        assertTrue(Sort.isSorted(ints, comparator));
    }

    @Test
    void shellSortHibbard() {
        Sort.shell(ints, comparator, Sort.generateGapSequence(Sort.GapSequence.HIBBARD, size));
        assertTrue(Sort.isSorted(ints, comparator));
    }

    @Test
    void insertionSortInts() {
        Sort.swaps = 0;
        Integer[] integers = new Integer[]{5, 4, 3, 2, 1};
        Comparator<Integer> comparator = Comparator.naturalOrder();

        Sort.insertion(integers, comparator);
        assertTrue(Sort.isSorted(integers, comparator));
    }

    @Test
    void isSorted() {
        Integer[] ints = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Integer[] ints1 = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0};

        assertTrue(Sort.isSorted(ints, Integer::compareTo));
        assertFalse(Sort.isSorted(ints1, Integer::compareTo));
    }

    @Test
    void isSortedOnEmptyList() {
        Integer[] empty = new Integer[0];
        assertTrue(Sort.isSorted(empty, Integer::compareTo));
    }

    @Test
    void testCiuraSeq() {
        int[] expected = new int[]{1750, 701, 301, 132, 57, 23, 10, 4, 1};
        assertArrayEquals(expected, Sort.generateGapSequence(Sort.GapSequence.CIURA, Integer.MAX_VALUE));
    }

    @Test
    void testSedgewickSeq() {
        int[] expected = new int[]{2161, 929, 505, 209, 109, 41, 19, 5, 1};
        assertArrayEquals(expected, Sort.generateGapSequence(Sort.GapSequence.SEDGEWICK, 5000));
    }

    @Test
    void testHibbardSeq() {
        int[] expected = new int[]{2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1};
            assertArrayEquals(expected, Sort.generateGapSequence(Sort.GapSequence.HIBBARD, 5000));
    }
}
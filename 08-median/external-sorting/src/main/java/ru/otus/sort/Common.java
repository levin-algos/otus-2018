package ru.otus.sort;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.EnumSet;
import java.util.function.BiConsumer;

public class Common {

    private static final int INT_SIZE = 4;

    // MAXIMUM 1GB
    public static void writeInts(Path path, int offset, int size, BiConsumer<Integer, ByteBuffer> fn) {
        try (RandomAccessFile raf = new RandomAccessFile(path.toString(), "rw")) {
            try (FileChannel ch = raf.getChannel()) {
                ch.position(offset*INT_SIZE);
                ByteBuffer buf = ByteBuffer.allocate(size * INT_SIZE);
                fn.accept(size, buf);
                buf.flip();
                ch.write(buf);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Checks if file generated by {@link #writeInts} is sorted
     * starting from {@code start} integer (inclusive) and ends with {@code end} integer (exclusive)
     *
     * @param path  - file path to check
     * @param start - staring number of integer (inclusive)
     * @param end   - finish position of integer (exclusive)
     * @return - true - if file is sorted. Else - false
     */
    public static boolean isSortedIntSeq(Path path, int start, int end) {
        IntBuffer buf = readInts(path, start, end);

        int cursor = Integer.MIN_VALUE;
        while (buf.hasRemaining()) {
            int i = buf.get();
            if (cursor > i)
                return false;
            cursor = i;
        }

        return true;
    }

    public static IntBuffer readInts(Path path, long start, long end) {
        try (FileChannel reader = (FileChannel)Files.newByteChannel(path, EnumSet.of(StandardOpenOption.READ))) {

            MappedByteBuffer map = reader.map(FileChannel.MapMode.READ_ONLY, start*INT_SIZE,(end - start)*INT_SIZE);

            if (!map.isLoaded())
                map.load();

            IntBuffer buffer = map.order(ByteOrder.BIG_ENDIAN).asIntBuffer();
            buffer.rewind();
            return buffer;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}